<!DOCTYPE html>
<html>

<head>
  <title>
    Download You Tube Videos
  </title>
  <link rel='stylesheet' href='/stylesheets/style.css' />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css" />
  <meta property="og:title" content="Youtube Video Downloader - Download YouTube Videos" />
  <meta property="og:description" content="Download YouTube videos" />
</head>
<body>
  <!-- <h1>
    <%= title %>
  </h1> -->
  <!-- <p>Welcome to <%= title %></p> -->
  <div class="ftco-section center">
    <div class="container">
      <p>Download YouTube videos</p>
      <form id="main-form" class="search-form relative" method="POST" role="search">
        <input id="url" type="enter video url" name="url" class="search__input" aria-label="Search"
          placeholder="Enter video url" required autofocus>
        <button id="submit" class="btn-red" type="submit">Click Me</button>
      </form>


      <div id="content-wrapper" class="wapper">
        <% if (videoData && videoData.player_response) { %>
          <% var miliseconds=videoData.player_response.streamingData.formats[0].approxDurationMs; var
            minutes=Math.floor(miliseconds / 60000); var seconds=((miliseconds % 60000) / 1000).toFixed(0); const
            videoTime=minutes + ":" + (seconds < 10 ? '0' : '' ) + seconds; %>
            <form id="main-form" class="search-form relative" action="download" method="POST" role="download">
              <div class="thumbnail clearfix mt-5"><input type="hidden" id="video_id" value="HYUpNJJELeE">
                <img
                  src="<%= videoData.player_response.videoDetails.thumbnail.thumbnails[videoData.player_response.videoDetails.thumbnail.thumbnails.length - 1].url %>"
                  width="300px" height="250px" alt="9Convert youtube downloader" style="width: 100%; height: 100%">
                <h2><a href="javascript:void(0);">
                    <%= videoData.player_response.videoDetails.title %>
                  </a>
                </h2>
                <p class="time">
                  <%= videoTime %>
                </p>
                <input type="hidden" name="url" value="<%= url %>" />
                <input type="hidden" name="title" value="<%= videoData.player_response.videoDetails.title %>" />
                <input type="hidden" name="videoId" value="<%= videoData.player_response.videoDetails.videoId %>" />
                <input type="hidden" name="audioTag" value="<%= audio %>" />
                <div class="downfun dispweb"> <button class="btn-action" type="submit">Download</button>
                  <div class="select-box"><select id="format" name="format">
                      <!-- <% if (videoData && videoData.player_response && videoData.player_response.streamingData &&
                        videoData.player_response.streamingData.adaptiveFormats) { %>

                        <% for(var i=0; i < videoData.player_response.streamingData.adaptiveFormats.length; i++) {%>
                          <% if (!videoData.player_response.streamingData.adaptiveFormats[i].mimeType.includes('audio'))
                            {
                              const bytes = videoData.player_response.streamingData.adaptiveFormats[i].contentLength;

                              const k = 1024;
                              const decimals = 2;
                              const dm = decimals < 0 ? 0 : decimals;
                              const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

                              const iVal = Math.floor(Math.log(bytes) / Math.log(k));

                              const covertedSize = parseFloat((bytes / Math.pow(k, iVal)).toFixed(dm)) + ' ' + sizes[iVal];
                            %>
                            <option
                              value="<%= JSON.stringify(videoData.player_response.streamingData.adaptiveFormats[i]) %>">
                              <%= videoData.player_response.streamingData.adaptiveFormats[i].qualityLabel%>
                                <%= videoData.player_response.streamingData.adaptiveFormats[i].mimeType%>
                                 (<%= covertedSize %>)
                            </option>
                            <% } %>
                              <% } %>
                                <% } %> -->

                                <% for(var i=0; i < mimeTypes.length; i++) {%>
                                    <option
                                      value="<%= JSON.stringify(videoData.player_response.streamingData.adaptiveFormats[i]) %>">
                                      <%= mimeTypes[i].qualityLabel %>
                                        <%= mimeTypes[i].mimeType %>
                                         (<%= mimeTypes[i].length %>)
                                    </option>
                                      <% } %>

                    </select></div>
                </div>
              </div>
            </form>
            <% } %>

      </div>
    </div>
    
    <footer>
      <div class="copyright">
        <ul class="flex flex-a-i-center">
          <li>Developed By Ashish K</li>
          <li><a target="_blank" href="https://ashishkumar.hashnode.dev/">Blog URL</a></li>
          <li><a target="_blank" href="https://npmjs.com/~codewithashish">npm packages</a></li>
          <!-- <li>Currently 360P download supported. Working on HD videos download</li> -->
        </ul>
      </div>
    </footer>

    Currently 360P videos download supported. Working on HD videos download
</body>

</html>